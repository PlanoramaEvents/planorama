#
# This is sample docker file for use in a prod environment
#
# NOTE:
# You will need to create the redis-data volumes:
# docker volume create --name=redis-data
#
# NOTE: if you want to run postgres in a container have a look at the staging compose file
# you will need to set the links for web and sidekiq accordingling and also set up
# an external volume for postgres data
#
# docker volume create --name=pgdata
#

version: "3.7"

volumes:
  redis-data:

services:
  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis-data:/data
  web:
    command: "/opt/planorama/script/planorama_start.sh"
    # planorama:latest for latest release (tagged)
    # planorama:main for latest build of main branch
    image: ghcr.io/planoramaevents/planorama:latest
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      # NOTE: this will need to reflect local system
      - /var/log/planorama/web:/opt/planorama/log
      - type: tmpfs
        target: /app/tmp
    environment:
      - PGID=1005
      - PUID=1001
      - RAILS_ENV=production
      - NODE_ENV=production
    env_file:
      # NOTE: this will need to reflect local system
      - "/opt/plano/etc/planorama.env"
    depends_on:
      - redis
    links:
      - redis
    restart: always

  planorama-sidekiq:
    command: "/opt/planorama/script/planorama_sidekiq.sh"
    # See above note re which image to use
    image: ghcr.io/planoramaevents/planorama:latest
    volumes:
      # NOTE: this will need to reflect local system
      - /var/log/planorama/sidekiq:/opt/planorama/log
      - type: tmpfs
        target: /app/tmp
    environment:
      - PGID=1005
      - PUID=1001
      - RAILS_ENV=production
      - NODE_ENV=production
    env_file:
      # NOTE: this will need to reflect local system
      - "/opt/plano/etc/planorama.env"
    depends_on:
      - redis
    links:
      - redis
    restart: always
