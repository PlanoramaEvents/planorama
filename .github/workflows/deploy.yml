---
name: "Build Planorame Docker image for Deploy"

on:
  push:
  schedule:
    - cron:  "0 * * * *"
    branches:
      - main
      - staging
      # - release
      # - ci-testing*

jobs:
  release:
    runs-on: ubuntu-20.04
    # Temp key for building assets and tests
    env:
      DEVISE_SECRET: aa77bb734faa9b935c1f8b68846e37aed9096cc9fb746copypastaf856594409a11b1086535e468edb2e5bbc18482b386b6264ada38703dcdefd94a291ab5a95eb5

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 4096
          temp-reserve-mb: 4096
          root-reserve-mb: 16384
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Build Space
        run: |
          echo "Free space:"
          df -h

      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
        id: extract_name

      # ARE THE SECRETS ORG LEVEL AND DO WE HAVE ACCESS ????
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Define the repository labels
        run: |
          echo "CONTAINER_TEST_REPOSITORY=${{ steps.login-ecr.outputs.registry }}/planorama:ci-${{ github.sha }}" >> $GITHUB_ENV
          echo "CONTAINER_DEPLOY_REPOSITORY=${{ steps.login-ecr.outputs.registry }}/planorama:${{ steps.extract_name.outputs.branch }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build the image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile-prod
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            DEVISE_SECRET=${{ env.DEVISE_SECRET }}
            RAILS_ENV=production
            NODE_ENV=production
          push: false
          load: true
          # target: development
          tags: "${{ env.CONTAINER_TEST_REPOSITORY }}"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Run specs
        run: |
          docker run -d --name="test-database" --hostname "postgres" -e DEVISE_SECRET=${{ env.DEVISE_SECRET }} -e "POSTGRES_PASSWORD=test" postgres:latest
          docker run --network "container:test-database" -e RAILS_ENV=test -e DEVISE_SECRET=${{ env.DEVISE_SECRET }} -e "POSTGRES_PASSWORD=test" $CONTAINER_TEST_REPOSITORY /bin/sh -c "bundle exec rake db:create db:structure:load; bundle exec rspec"

      # The docker pull does not work
      - name: Run security tests
        if: ${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/security-') }}
        run: |
          docker run -e RAILS_ENV=test $CONTAINER_TEST_REPOSITORY bundle update brakeman --quiet
          docker run -e RAILS_ENV=test $CONTAINER_TEST_REPOSITORY bundle exec brakeman --run-all-checks --no-pager
          # docker run -e RAILS_ENV=test $CONTAINER_TEST_REPOSITORY bundle exec bundler-audit check --update
          # docker run -e RAILS_ENV=test $CONTAINER_TEST_REPOSITORY bundle exec ruby-audit check
          docker run -e RAILS_ENV=production -e NODE_ENV=production $CONTAINER_TEST_REPOSITORY yarn check --integrity

      - name: Publish the deployable image
        run: |
          docker tag $CONTAINER_TEST_REPOSITORY $CONTAINER_DEPLOY_REPOSITORY
          docker push $CONTAINER_DEPLOY_REPOSITORY

      # I think this is not needed since the "test" image is not pushed
      # - name: Clean up the CI testing tag
      #   run: |
      #     aws ecr batch-delete-image --repository-name planorama --image-ids imageTag=ci-${{ github.sha }}

      # TODO: this is python script to do .... ?
      # - id: deploy
      #   name: Deploy to the target host
      #   if: ${{ startsWith(github.ref, 'refs/heads/staging') }}
      #   run: |
      #     ./deploy/deploy-tag.py "${{ steps.extract_name.outputs.branch }}" --description "@${{ github.actor }} deployed ${{ steps.extract_name.outputs.branch }} to staging from the deploy action"
